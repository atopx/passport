// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: protocol/passport.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PassportService_Health_FullMethodName         = "/protocol.PassportService/Health"
	PassportService_CreateUser_FullMethodName     = "/protocol.PassportService/CreateUser"
	PassportService_DeleteUser_FullMethodName     = "/protocol.PassportService/DeleteUser"
	PassportService_UpdateUser_FullMethodName     = "/protocol.PassportService/UpdateUser"
	PassportService_SearchUser_FullMethodName     = "/protocol.PassportService/SearchUser"
	PassportService_GetUserById_FullMethodName    = "/protocol.PassportService/GetUserById"
	PassportService_GetUserByToken_FullMethodName = "/protocol.PassportService/GetUserByToken"
	PassportService_SignIn_FullMethodName         = "/protocol.PassportService/SignIn"
	PassportService_SignOut_FullMethodName        = "/protocol.PassportService/SignOut"
)

// PassportServiceClient is the client API for PassportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PassportService 认证服务
type PassportServiceClient interface {
	// Health 服务健康检查
	Health(ctx context.Context, in *HealthParam, opts ...grpc.CallOption) (*HealthParamReply, error)
	// CreateUser 创建用户
	CreateUser(ctx context.Context, in *CreateUserParam, opts ...grpc.CallOption) (*CreateUserReply, error)
	// DeleteUser 删除用户
	DeleteUser(ctx context.Context, in *DeleteUserParam, opts ...grpc.CallOption) (*DeleteUserReply, error)
	// UpdateUser 更新用户
	UpdateUser(ctx context.Context, in *UpdateUserParam, opts ...grpc.CallOption) (*UpdateUserReply, error)
	// SearchUser 搜索用户
	SearchUser(ctx context.Context, in *SearchUserParam, opts ...grpc.CallOption) (*SearchUserReply, error)
	// GetUserById 获取用户
	GetUserById(ctx context.Context, in *GetUserByIdParam, opts ...grpc.CallOption) (*GetUserByIdReply, error)
	// GetUserByToken 基于token查询用户(已失效 => ERROR_TOKEN)
	GetUserByToken(ctx context.Context, in *GetUserByTokenParam, opts ...grpc.CallOption) (*GetUserByTokenReply, error)
	// SignIn 登陆
	SignIn(ctx context.Context, in *SignInParam, opts ...grpc.CallOption) (*SignInReply, error)
	// SignOut 登出
	SignOut(ctx context.Context, in *SignOutParam, opts ...grpc.CallOption) (*SignOutReply, error)
}

type passportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPassportServiceClient(cc grpc.ClientConnInterface) PassportServiceClient {
	return &passportServiceClient{cc}
}

func (c *passportServiceClient) Health(ctx context.Context, in *HealthParam, opts ...grpc.CallOption) (*HealthParamReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthParamReply)
	err := c.cc.Invoke(ctx, PassportService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportServiceClient) CreateUser(ctx context.Context, in *CreateUserParam, opts ...grpc.CallOption) (*CreateUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserReply)
	err := c.cc.Invoke(ctx, PassportService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportServiceClient) DeleteUser(ctx context.Context, in *DeleteUserParam, opts ...grpc.CallOption) (*DeleteUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserReply)
	err := c.cc.Invoke(ctx, PassportService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportServiceClient) UpdateUser(ctx context.Context, in *UpdateUserParam, opts ...grpc.CallOption) (*UpdateUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserReply)
	err := c.cc.Invoke(ctx, PassportService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportServiceClient) SearchUser(ctx context.Context, in *SearchUserParam, opts ...grpc.CallOption) (*SearchUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUserReply)
	err := c.cc.Invoke(ctx, PassportService_SearchUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportServiceClient) GetUserById(ctx context.Context, in *GetUserByIdParam, opts ...grpc.CallOption) (*GetUserByIdReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByIdReply)
	err := c.cc.Invoke(ctx, PassportService_GetUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportServiceClient) GetUserByToken(ctx context.Context, in *GetUserByTokenParam, opts ...grpc.CallOption) (*GetUserByTokenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByTokenReply)
	err := c.cc.Invoke(ctx, PassportService_GetUserByToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportServiceClient) SignIn(ctx context.Context, in *SignInParam, opts ...grpc.CallOption) (*SignInReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInReply)
	err := c.cc.Invoke(ctx, PassportService_SignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportServiceClient) SignOut(ctx context.Context, in *SignOutParam, opts ...grpc.CallOption) (*SignOutReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignOutReply)
	err := c.cc.Invoke(ctx, PassportService_SignOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassportServiceServer is the server API for PassportService service.
// All implementations must embed UnimplementedPassportServiceServer
// for forward compatibility.
//
// PassportService 认证服务
type PassportServiceServer interface {
	// Health 服务健康检查
	Health(context.Context, *HealthParam) (*HealthParamReply, error)
	// CreateUser 创建用户
	CreateUser(context.Context, *CreateUserParam) (*CreateUserReply, error)
	// DeleteUser 删除用户
	DeleteUser(context.Context, *DeleteUserParam) (*DeleteUserReply, error)
	// UpdateUser 更新用户
	UpdateUser(context.Context, *UpdateUserParam) (*UpdateUserReply, error)
	// SearchUser 搜索用户
	SearchUser(context.Context, *SearchUserParam) (*SearchUserReply, error)
	// GetUserById 获取用户
	GetUserById(context.Context, *GetUserByIdParam) (*GetUserByIdReply, error)
	// GetUserByToken 基于token查询用户(已失效 => ERROR_TOKEN)
	GetUserByToken(context.Context, *GetUserByTokenParam) (*GetUserByTokenReply, error)
	// SignIn 登陆
	SignIn(context.Context, *SignInParam) (*SignInReply, error)
	// SignOut 登出
	SignOut(context.Context, *SignOutParam) (*SignOutReply, error)
	mustEmbedUnimplementedPassportServiceServer()
}

// UnimplementedPassportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPassportServiceServer struct{}

func (UnimplementedPassportServiceServer) Health(context.Context, *HealthParam) (*HealthParamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedPassportServiceServer) CreateUser(context.Context, *CreateUserParam) (*CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedPassportServiceServer) DeleteUser(context.Context, *DeleteUserParam) (*DeleteUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedPassportServiceServer) UpdateUser(context.Context, *UpdateUserParam) (*UpdateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedPassportServiceServer) SearchUser(context.Context, *SearchUserParam) (*SearchUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedPassportServiceServer) GetUserById(context.Context, *GetUserByIdParam) (*GetUserByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedPassportServiceServer) GetUserByToken(context.Context, *GetUserByTokenParam) (*GetUserByTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByToken not implemented")
}
func (UnimplementedPassportServiceServer) SignIn(context.Context, *SignInParam) (*SignInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedPassportServiceServer) SignOut(context.Context, *SignOutParam) (*SignOutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedPassportServiceServer) mustEmbedUnimplementedPassportServiceServer() {}
func (UnimplementedPassportServiceServer) testEmbeddedByValue()                         {}

// UnsafePassportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassportServiceServer will
// result in compilation errors.
type UnsafePassportServiceServer interface {
	mustEmbedUnimplementedPassportServiceServer()
}

func RegisterPassportServiceServer(s grpc.ServiceRegistrar, srv PassportServiceServer) {
	// If the following call pancis, it indicates UnimplementedPassportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PassportService_ServiceDesc, srv)
}

func _PassportService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServiceServer).Health(ctx, req.(*HealthParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServiceServer).CreateUser(ctx, req.(*CreateUserParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServiceServer).DeleteUser(ctx, req.(*DeleteUserParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServiceServer).UpdateUser(ctx, req.(*UpdateUserParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportService_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportService_SearchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServiceServer).SearchUser(ctx, req.(*SearchUserParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportService_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServiceServer).GetUserById(ctx, req.(*GetUserByIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportService_GetUserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByTokenParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServiceServer).GetUserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportService_GetUserByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServiceServer).GetUserByToken(ctx, req.(*GetUserByTokenParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServiceServer).SignIn(ctx, req.(*SignInParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportService_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServiceServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassportService_SignOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServiceServer).SignOut(ctx, req.(*SignOutParam))
	}
	return interceptor(ctx, in, info, handler)
}

// PassportService_ServiceDesc is the grpc.ServiceDesc for PassportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.PassportService",
	HandlerType: (*PassportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _PassportService_Health_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _PassportService_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _PassportService_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _PassportService_UpdateUser_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _PassportService_SearchUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _PassportService_GetUserById_Handler,
		},
		{
			MethodName: "GetUserByToken",
			Handler:    _PassportService_GetUserByToken_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _PassportService_SignIn_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _PassportService_SignOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/passport.proto",
}
